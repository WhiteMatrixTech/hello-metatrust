/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Vault, VaultInterface } from "../../contracts/Vault";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_password",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_password",
        type: "bytes32",
      },
    ],
    name: "addUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "count",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "data",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "slot",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "elementSize",
        type: "uint256",
      },
    ],
    name: "getArrayLocation",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "slot",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "key",
        type: "uint256",
      },
    ],
    name: "getMapLocation",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "isTrue",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "someConst",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "u16",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052607b60005560018054600160a01b6001600160a81b03199091163360ff60a01b1916171761ffff60a81b1916601f60a81b17905534801561004457600080fd5b506040516104013803806104018339810160408190526100639161006b565b600255610084565b60006020828403121561007d57600080fd5b5051919050565b61036e806100936000396000f3fe608060405234801561001057600080fd5b50600436106100925760003560e01c8063881374d711610066578063881374d7146101075780638da5cb5b1461011a5780638faf850d14610145578063992ddc6f146101e2578063f0ba8440146101f557600080fd5b806274530a1461009757806306661abd146100c05780630a6b4e06146100d757806359d168b6146100ff575b600080fd5b6001546100ab90600160a01b900460ff1681565b60405190151581526020015b60405180910390f35b6100c960005481565b6040519081526020016100b7565b6001546100ec90600160a81b900461ffff1681565b60405161ffff90911681526020016100b7565b6100c9607b81565b6100c9610115366004610291565b610208565b60015461012d906001600160a01b031681565b6040516001600160a01b0390911681526020016100b7565b6101e06101533660046102b3565b604080518082018252600680548083526020808401958652600180830184556000938452845160029093027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f810184905587517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d409091015591835260079052929020905181559151910155565b005b6100c96101f03660046102cc565b610237565b6100c96102033660046102b3565b61027a565b604080516020808201849052818301859052825180830384018152606090920190925280519101205b92915050565b6000610243828461030e565b6040805160208101879052016040516020818303038152906040528051906020012060001c6102729190610325565b949350505050565b6003816003811061028a57600080fd5b0154905081565b600080604083850312156102a457600080fd5b50508035926020909101359150565b6000602082840312156102c557600080fd5b5035919050565b6000806000606084860312156102e157600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610231576102316102f8565b80820180821115610231576102316102f856fea2646970667358221220aba2d7a0213914e78abd7141550fb4c43421b14384e70fcf6a5fb2e073e0cd0f64736f6c63430008110033";

type VaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Vault__factory extends ContractFactory {
  constructor(...args: VaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _password: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Vault> {
    return super.deploy(_password, overrides || {}) as Promise<Vault>;
  }
  override getDeployTransaction(
    _password: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_password, overrides || {});
  }
  override attach(address: string): Vault {
    return super.attach(address) as Vault;
  }
  override connect(signer: Signer): Vault__factory {
    return super.connect(signer) as Vault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VaultInterface {
    return new utils.Interface(_abi) as VaultInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Vault {
    return new Contract(address, _abi, signerOrProvider) as Vault;
  }
}
