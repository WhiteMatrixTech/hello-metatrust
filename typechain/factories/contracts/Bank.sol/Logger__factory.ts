/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Logger,
  LoggerInterface,
} from "../../../contracts/Bank.sol/Logger";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "action",
        type: "string",
      },
    ],
    name: "Log",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_caller",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_action",
        type: "string",
      },
    ],
    name: "log",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061020f806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a1f2e8aa14610030575b600080fd5b61004361003e36600461009b565b610045565b005b7f4e3358e5bdb38f499a83fbcd33d16343569f3b6fe53021022dede6364017b4a883838360405161007893929190610174565b60405180910390a1505050565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156100b057600080fd5b83356001600160a01b03811681146100c757600080fd5b925060208401359150604084013567ffffffffffffffff808211156100eb57600080fd5b818601915086601f8301126100ff57600080fd5b81358181111561011157610111610085565b604051601f8201601f19908116603f0116810190838211818310171561013957610139610085565b8160405282815289602084870101111561015257600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60018060a01b038416815260006020848184015260606040840152835180606085015260005b818110156101b65785810183015185820160800152820161019a565b506000608082860101526080601f19601f8301168501019250505094935050505056fea26469706673582212202466e212d76bcd21f126fea5d801ef4367161cefe3e6bc1de0f71ddfbe21b90064736f6c63430008110033";

type LoggerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LoggerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Logger__factory extends ContractFactory {
  constructor(...args: LoggerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Logger> {
    return super.deploy(overrides || {}) as Promise<Logger>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Logger {
    return super.attach(address) as Logger;
  }
  override connect(signer: Signer): Logger__factory {
    return super.connect(signer) as Logger__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LoggerInterface {
    return new utils.Interface(_abi) as LoggerInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Logger {
    return new Contract(address, _abi, signerOrProvider) as Logger;
  }
}
