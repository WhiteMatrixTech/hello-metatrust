/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Lib,
  LibInterface,
} from "../../../contracts/Delegatecall.sol/Lib";

const _abi = [
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pwn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060b38061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80638da5cb5b146037578063dd365b8b146065575b600080fd5b6000546049906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b607b600080546001600160a01b03191633179055565b00fea26469706673582212207de00be21cab7f4d335dce19bb6384443cd3ba23c12bcc3443e09c06d892f39264736f6c63430008110033";

type LibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Lib__factory extends ContractFactory {
  constructor(...args: LibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Lib> {
    return super.deploy(overrides || {}) as Promise<Lib>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Lib {
    return super.attach(address) as Lib;
  }
  override connect(signer: Signer): Lib__factory {
    return super.connect(signer) as Lib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibInterface {
    return new utils.Interface(_abi) as LibInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Lib {
    return new Contract(address, _abi, signerOrProvider) as Lib;
  }
}
