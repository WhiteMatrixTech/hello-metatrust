/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  HackMe,
  HackMeInterface,
} from "../../../contracts/Delegatecall.sol/HackMe";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract Lib",
        name: "_lib",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "lib",
    outputs: [
      {
        internalType: "contract Lib",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516101bc3803806101bc83398101604081905261002f91610062565b60008054336001600160a01b031991821617909155600180549091166001600160a01b0392909216919091179055610092565b60006020828403121561007457600080fd5b81516001600160a01b038116811461008b57600080fd5b9392505050565b61011b806100a16000396000f3fe60806040526004361060265760003560e01c80638da5cb5b14607d578063928012301460b7575b6001546040516001600160a01b0390911690604490600090369060d5565b600060405180830381855af49150503d8060008114607b576040519150601f19603f3d011682016040523d82523d6000602084013e005b005b348015608857600080fd5b50600054609b906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b34801560c257600080fd5b50600154609b906001600160a01b031681565b818382376000910190815291905056fea2646970667358221220be4ffe68a19f2bb13b99b91813480ae432da19da7bd8cdb0f54dd0b1e9c0b93164736f6c63430008110033";

type HackMeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HackMeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class HackMe__factory extends ContractFactory {
  constructor(...args: HackMeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _lib: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<HackMe> {
    return super.deploy(_lib, overrides || {}) as Promise<HackMe>;
  }
  override getDeployTransaction(
    _lib: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_lib, overrides || {});
  }
  override attach(address: string): HackMe {
    return super.attach(address) as HackMe;
  }
  override connect(signer: Signer): HackMe__factory {
    return super.connect(signer) as HackMe__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HackMeInterface {
    return new utils.Interface(_abi) as HackMeInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): HackMe {
    return new Contract(address, _abi, signerOrProvider) as HackMe;
  }
}
