/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Target, TargetInterface } from "../../contracts/Target";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "isContract",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "protected",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "pwned",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526000805460ff1916905534801561001a57600080fd5b506101438061002a6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631627905514610046578063834d81851461006e57806395f11c0e14610078575b600080fd5b61005a6100543660046100dd565b3b151590565b604051901515815260200160405180910390f35b610076610085565b005b60005461005a9060ff1681565b333b156100ce5760405162461bcd60e51b81526020600482015260136024820152721b9bc818dbdb9d1c9858dd08185b1b1bddd959606a1b604482015260640160405180910390fd5b6000805460ff19166001179055565b6000602082840312156100ef57600080fd5b81356001600160a01b038116811461010657600080fd5b939250505056fea2646970667358221220f384f6fce4f219b31b2d5ee519ccfb29d1b717dbb7d7c318d397287674453b9564736f6c63430008110033";

type TargetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TargetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Target__factory extends ContractFactory {
  constructor(...args: TargetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Target> {
    return super.deploy(overrides || {}) as Promise<Target>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Target {
    return super.attach(address) as Target;
  }
  override connect(signer: Signer): Target__factory {
    return super.connect(signer) as Target__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TargetInterface {
    return new utils.Interface(_abi) as TargetInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Target {
    return new Contract(address, _abi, signerOrProvider) as Target;
  }
}
