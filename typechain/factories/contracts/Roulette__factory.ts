/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Roulette, RouletteInterface } from "../../contracts/Roulette";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "pastBlockTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "spin",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405261018a806100136000396000f3fe6080604052600436106100295760003560e01c806358d02b091461002e578063f0acd7d514610056575b600080fd5b34801561003a57600080fd5b5061004460005481565b60405190815260200160405180910390f35b61005e610060565b005b34678ac7230489e800001461007457600080fd5b600054420361008257600080fd5b42600081905561009490600f90610132565b60000361013057604051600090339047908381818185875af1925050503d80600081146100dd576040519150601f19603f3d011682016040523d82523d6000602084013e6100e2565b606091505b505090508061012e5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b604482015260640160405180910390fd5b505b565b60008261014f57634e487b7160e01b600052601260045260246000fd5b50069056fea2646970667358221220f7171476b39e2bc750e5758ba4bf0e9b970b249aeef1f72b434b242cf180626d64736f6c63430008110033";

type RouletteConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RouletteConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Roulette__factory extends ContractFactory {
  constructor(...args: RouletteConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<Roulette> {
    return super.deploy(overrides || {}) as Promise<Roulette>;
  }
  override getDeployTransaction(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Roulette {
    return super.attach(address) as Roulette;
  }
  override connect(signer: Signer): Roulette__factory {
    return super.connect(signer) as Roulette__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RouletteInterface {
    return new utils.Interface(_abi) as RouletteInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Roulette {
    return new Contract(address, _abi, signerOrProvider) as Roulette;
  }
}
